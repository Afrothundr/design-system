/*
Button

@analytics

@uswds https://designsystem.digital.gov/components/buttons

Use buttons to signal actions.

Markup: button.example.html

Style guide: components.button
*/

/*
Button icons

- Add an inline SVG icon and it will become the same color as the button text. For the crispest icon rendering, ensure the icon has a square `viewBox` with values that are multiples of `8` (ie. `24x24`).
- Use the margin utility class to add spacing between the icon and button text.

Markup: button-icons.example.html

Style guide: components.button.icons
*/

/*
Button inline with field

The button is the same height as a single-line text field.

Markup: button-inline.example.html

Style guide: components.button.inline-field
*/

/*
`<Button>`

The `Button` component accepts its text as children (AKA inner HTML), which
means you can also pass in HTML or custom components. This gives you a lot of
flexibility and supports a variety of advanced use cases. The most common use
case would be passing in an SVG icon along with the text.

In addition to the supported props listed, you can also pass in additional
props, which will be passed to the rendered root component. For example,
you could pass in a `target` prop to pass to the rendered anchor element.

@react-example Button.example.jsx

@react-props Button.tsx

Style guide: components.button.react
*/

/*
Analytics Event Object

<table class="ds-c-table ds-c-table--compact">
  <thead>
    <tr>
      <th>Name</th>
      <th>Type</th>
      <th>Default</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="ds-u-font-weight--bold">event_name</code></td>
      <td><code>string</code></td>
      <td><code>'button_engagement'</code></td>
      <td>
        <p>The event_name becomes how the event is found in the analytics GUI.</p>
      </td>
    </tr>
    <tr>
      <td><code class="ds-u-font-weight--bold">text</code></td>
      <td><code>string</code></td>
      <td>[children prop that are text]</td>
      <td>
        <p>The text found inside the button. Please ensure this does not include PII. If it does, use `analytics` prop to override.</p>
      </td>
    </tr>
    <tr>
      <td><code class="ds-u-font-weight--bold">ga_eventAction</code></td>
      <td><code>string</code></td>
      <td><code>'engaged [variation] button'</code></td>
      <td>
        <p>Since this is net-new tracking, this will support Universal Analytics measurement. This would capture the button_style within standardized parameters. </p>
      </td>
    </tr>
    <tr>
      <td><code class="ds-u-font-weight--bold">ga_eventCategory</code></td>
      <td><code>string</code></td>
      <td><code>'ui components'</code></td>
      <td>
        <p>Since this is net-new tracking, this will support Universal Analytics measurement.</p>
      </td>
    </tr>
    <tr>
      <td><code class="ds-u-font-weight--bold">ga_eventLabel</code></td>
      <td><code>string</code></td>
      <td><code>'button text: [text]'</code></td>
      <td>
        <p>This value would be leveraged for Universal Analytics</p>
      </td>
    </tr>
    <tr>
      <td>
        <code class="ds-u-font-weight--bold">button_style</code>
      </td>
      <td><code>string</code></td>
      <td><code>[variation prop]</code></td>
      <td>
        <p>This will capture the style of the button that was presented to the user.</p>
      </td>
    </tr>
    <tr>
      <td>
        <code class="ds-u-font-weight--bold">button_type</code>
      </td>
      <td><code>string</code></td>
      <td></td>
      <td>
        <p>This would explain what the button's purpose was. If Button is a link, it will display 'link' otherwise it will use the `type` prop</p>
      </td>
    </tr>
    <tr>
      <td><code class="ds-u-font-weight--bold">link_url</code></td>
      <td><code>string</code></td>
      <td><code>[href prop]</code> (if button is a link) otherwise <code>null</code></td>
      <td>
        <p>The URL the link directs to</p>
      </td>
    </tr>
    <tr>
      <td><code class="ds-u-font-weight--bold">html_id</code></td>
      <td><code>string</code></td>
      <td><code>[id prop]</code> (if provided) otherwise <code>null</code></td>
      <td>
        <p>New ID that is optional for teams to add if necessary to differentiate if multiple buttons exist</p>
      </td>
    </tr>
    </tbody>
</table>

Style guide: components.button.analytics
*/
/*
---

### When to use

- Use buttons for the most important actions you want users to take on your site, such as "Download," "Sign up," or "Apply."

### When to consider alternatives

- Less popular or less important actions may be visually styled as links.
- Buttons are for performing actions, not making choices. If you need your users to make a choice, use something else like radio buttons. Alternatively, if one choice is much less important then try styling it as a link instead.

### Usage

- Use the "primary" button variation for the button most users should click. This is your primary call-to-action.
- Avoid using too many buttons on a page. Aim to use only one button per page.
- Avoid similar styles elsewhere on the page that could be confused for buttons.
- Use buttons for the primary action and links for secondary actions.

**Label text**

- Use sentence case for button labels.
- Button labels should be as short as possible with “trigger words” that your users will recognize to clearly explain what will happen when the button is clicked (for example, “Save and continue,” “Download” or “Sign up”).
- Make the first word of the button’s label a verb. For example, instead of “Complaint Filing”, label the button “File a complaint.”
- If a button has an icon, it should still have accompanying text describing the action.

**Destructive buttons**

- Use the "danger" button variation for destructive buttons. For example, buttons that delete or reset a user's information.
- Confirm the user meant to trigger a destructive action before following through with the action.
- Provide a method for a user to undo a destructive action.

**Disabled buttons**

- Don’t disable buttons, unless there’s a good reason to.
- If you do disable a button, make sure it receives the disabled styling. A `button` element will automatically be styled as a disabled button when it has the `disabled` HTML attribute, but an `a` element will need to have the `.ds-c-button--disabled` class applied to it.

### Accessibility

- Buttons should display a visible focus state when users tab to them.
- Create a button with a `button` or `a` element to retain the native click functionality. Avoid using `<div>` or `<img>` tags to create buttons. Screen readers don't automatically know either is a usable button.
- When styling links to look like buttons, remember that screen readers handle links slightly differently than they do buttons. Pressing the `Space` key triggers a button, but pressing the `Enter` key triggers a link.
- Dimmed or unavailable buttons should have the `disabled` attribute applied. This removes native click and keypress events from the button. It also prevents automated scanners from logging a low contrast error. Finally, it announces the button as "dimmed" or "disabled" to screen readers, offering users additional context.

### Learn more

- [Beyond Blue Links: Making Clickable Elements Recognizable](https://www.nngroup.com/articles/clickable-elements/)
- [7 Basic Best Practices for Buttons](http://www.uxmatters.com/mt/archives/2012/05/7-basic-best-practices-for-buttons.php)
- [The Grammar of Interactivity](http://www.uxbooth.com/articles/the-grammar-of-interactivity/)
- [GOV.UK navigation buttons discussion](https://paper.dropbox.com/doc/Navigation-buttons-continue-next-previous-ghLqL5a9Ostxxb3rvBhyO)

**Button alignment**
- [Buttons on forms and surveys: a look at some research](http://www.slideshare.net/cjforms/buttons-on-forms-and-surveys-a-look-at-some-research-2012)
- [Previous and Next Actions in Web Forms](https://www.lukew.com/ff/entry.asp?730=)

**ARIA**
- [Using the button role](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_button_role)
- [Building Accessible Buttons with ARIA](https://www.deque.com/blog/accessible-aria-buttons)

Style guide: components.button.guidance
*/

/*
Google Analytics

**Analytics event tracking is disabled by default.**

### Enable event tracking

- Import and set the `setButtonSendsAnalytics` feature flag to `true` in your application's entry file:

```JSX
import { setButtonSendsAnalytics } from "@cmsgov/<design-system-package>";
setButtonSendsAnalytics(true);
```
- Please check your application to ensure that no PII is included as part of the text of the button.
- On applications where the page has `utag` loaded, the data goes to Tealium which allows it to route to Google Analytics or the currently approved data analytics tools.

### Override  event tracking

- Pass changes via any of the [available analytics props](#components.button.analytics).
The `analytics` prop for the button component can be used to override any information sent to google analytics.
For example, if you wanted to send alternate text for a button (in the case it used PII or you needed to be more specific), you can do something like:
```
<Button
    analytics={{
        text: '[redacted], go to the next page'
    }}
>
    Jane, go to the next page
</Button>
```
Any prop you do not pass will be defaulted by the button component.

Style guide: components.button.guidance-analytics
*/
